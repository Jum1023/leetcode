#include <unordered_map>
#include <unordered_set>
#include <vector>
using namespace std;

class DSU
{
public:
	DSU(int size) : parent(size), rank(size, 1)
	{
		for (int i = 0; i < size; i++)
			parent[i] = i;
	}

	int Find(int x)
	{
		if (x != parent[x])
			parent[x] = Find(parent[x]);
		return parent[x];
	}

	bool Union(int x, int y)
	{
		int xr = Find(x), yr = Find(y);
		if (xr == yr)
			return false;
		parent[yr] = xr;
		rank[xr] += rank[yr];
		return true;
	}

	int Size(int x)
	{
		return rank[Find(x)];
	}

private:
	vector<int> parent;
	vector<int> rank;
};

class Solution
{
public:
	int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
	{
		int N = graph.size();
		DSU dsu(N);
		vector<int> seen(N);
		for (auto i : initial)
			seen[i] = 1;
		//count graph component without initial affected nodes
		for (int i = 0; i < N; ++i)
		{
			if (seen[i] == 1)
				continue;
			for (int j = 0; j < N; ++j)
			{
				if (seen[j] == 1)
					continue;
				if (graph[i][j] == 1)
					dsu.Union(i, j);
			}
		}

		vector<int> affectedcount(N);
		unordered_map<int, unordered_set<int>> m; //{initialnode,{affected by initialnode}}
		for (int i : initial)
		{
			for (int j = 0; j < N; ++j)
			{
				if (seen[j] == 0 && graph[i][j] == 1)
					m[i].insert(dsu.Find(j));
			}
			for (auto n : m[i])
				++affectedcount[n];
		}

		int res = -1, count = -1;
		for (auto &n : m)
		{
			int onlyaffectnode = 0;
			for (auto c : n.second) //count only affected component
			{
				if (affectedcount[c] == 1)
					onlyaffectnode += dsu.Size(c);
			}
			if (onlyaffectnode > count || (onlyaffectnode == count && n.first < res))
			{
				res = n.first;
				count = onlyaffectnode;
			}
		}
		return res;
	}
};