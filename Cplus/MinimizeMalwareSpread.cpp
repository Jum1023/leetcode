#include<vector>
using namespace std;

class DSU
{
public:
	DSU(int size):parent(size),rank(size,1),malware(size)
	{
		for(int i=0;i<size;i++)
			parent[i]=i;
	}

	int Find(int x)
	{
		if(x!=parent[x])
			parent[x]=Find(parent[x]);
		return parent[x];
	}

	bool Union(int x,int y)
	{
		int xr=Find(x),yr=Find(y);
		if(xr==yr)
			return false;
		parent[yr]=xr;
		rank[xr]+=rank[yr];
		return true;
	}

	void AddMalware(int x)
	{
		malware[Find(x)]++;
	}

	int getMaxSpreadNode(int x)
	{
        int p=Find(x);
        if(malware[p]==1)
            return rank[p];
		return 0;
	}

private:
	vector<int> parent;
	vector<int> rank;
	vector<int> malware;
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        DSU dsu(graph.size());
		for(int i=0;i<=(int)graph.size();i++)
			for(int j=i+1;j<(int)graph[0].size();j++)
				if(graph[i][j]==1)
					dsu.Union(i,j);
		for(int i=(int)initial.size()-1;i>=0;i--)
			dsu.AddMalware(initial[i]);
        int infected=-1,node=0;
        for(int i=(int)initial.size()-1;i>=0;i--)
        {
            int tmp=dsu.getMaxSpreadNode(initial[i]);
            if(tmp>infected)
            {
                infected=tmp;
                node=initial[i];
            }
            else if(tmp==infected&&initial[i]<node)
                node=initial[i];
        }
        return node;
    }
};